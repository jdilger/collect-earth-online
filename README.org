* Collect Earth Online

Crowd-sourced visual interpretation of on-demand satellite imagery

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 14)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]
- [[https://www.postgresql.org/download][Postgresql (version 12)]]
- [[https://postgis.net/install/][PostGIS (version 3)]]
- [[https://www.7-zip.org/][p7zip]]
- [[https://www.npmjs.com/][npm]]
- [[https://certbot.eff.org/][certbot]]
- [[https://www.openssl.org/source/][openssl]]

** Postgresql Database Setup

*Postgresql* needs to be installed on the machine that will be hosting
this website. This installation task is system specific and is beyond
the scope of this README, so please follow the instructions for your
operating system and Postgresql version. However, please ensure that
the database server's superuser account is named "postgres" and that
you know its database connection password before proceeding.

Once the Postgresql database server is running on your machine, you
should navigate to the toplevel directory (i.e., the directory
containing this README) and run the database build command as follows:

#+begin_src sh
clojure -A:build-db build-all
#+end_src

This will begin by creating a new database and role called ceo and
then add the postgis and pgcrypto extensions to it. Next, the script
will populate the database with the schemas, tables, and functions
that are necessary for storing and processing ceo's data. Finally, it
will load some default data into these tables that is necessary for
the website to function properly.

If you want to improve the performance of your Postgresql server, one
way is to visit the [[https://pgtune.leopard.in.ua/][pgtune]] website and input your system settings.
This will generate a set of configuration options that you can add to
the postgresql.conf file in your system-specific Postgresql data
directory.

If you would like to keep these settings separate for your own
reference, you can add them to a file called "performance.conf" that
you should place in your Postgresql data directory. You can then
import these settings into postgresql.conf by adding this line to the
end of that file:

#+begin_example
include = 'performance.conf'
#+end_example

Note that the Postgresql server will need to be restarted for these
changes to take effect.

** Email Server

To set up the email server for system emails, start by creating a file
named "mail-config.edn" in the root directory of the application. Add
the following EDN object containing server details to the file,
replacing the values with your own:

#+begin_src clojure
{:host                  "smtp.gmail.com"
 :user                  "support-my-domain@gmail.com"
 :pass                  "foobarbaz200"
 :tls                   true
 :port                  587
 :base-url              "https://my.domain/"
 :recipient-limit       100
 :mailing-list-interval 600}
#+end_src

** Enabling https

Create a certificate with certbot following the installation instructions
for your OS and environment. Then use openssl to package the certificates
into pkcs12 format. The server looks for keystore.pkcs12 in .key/ and
uses the passcode "foobar". To get the initial key the server must be
running in dev mode to allow http access to certbot.

An example process for an Ubuntu Linux system is as follows:

#+begin_src sh
sudo certbot certonly --webroot -w ./resources/public -d mydomain.com
sudo openssl pkcs12 -export \
             -in /etc/letsencrypt/live/mydomain.com/fullchain.pem \
             -inkey /etc/letsencrypt/live/mydomain.com/privkey.pem \
             -out ./.key/keystore.pkcs12 \
             -passout pass:foobar
#+end_src

The cert creation and renewal can be run automatically with the following command:

#+begin_src sh
clojure -A:ssl-key-gen mydomain.com
#+end_src

** Forwarding Ports

Forwarding ports from the defaults for http and https allows the web server
to run without sudo privileges. To forward ports use iptables. Installing
iptables-persistent after setting up the routing will automatically save
the rules persistently.

#+begin_src sh
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
sudo iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443
sudo iptables-save
sudo apt -y install iptables-persistent
#+end_src

** Web Server

To compile and run the web application, navigate to the toplevel
project directory and run:

#+begin_src sh
npm run webpack-<dev|prod>
clojure -A:run-server [-m <dev|prod>] [-p 8080] [-P 8443]
#+end_src

The website will then be available at http://localhost:8080 unless a
port is specified. An http port can be specified with -p and an https
port can be specified with -P. In dev mode, server-side exceptions
will be displayed in the browser and Clojure source files will be
reloaded whenever you refresh the page. These features are disabled in
prod mode. If the second argument to run-server is omitted, it will
default to prod mode.

** Building GEE-Gateway

In order to use the Geo-Dash portion of CEO, we need to install an
application to communicate with Google Earth Engine called
GEE-Gateway. To build and launch GEE-Gateway, download its source code
from https://github.com/openforis/gee-gateway and follow the steps in
its README file.

** Contact

*Authors:*
- [[mailto:gjohnson@sig-gis.com][Gary W. Johnson (SIG)]]
- [[mailto:dsaah@sig-gis.com][David S. Saah (SIG)]]
- [[mailto:billy.ashmall@nasa.gov][Billy Ashmall (NASA)]]
- [[mailto:githika.tondapu@nasa.gov][Githika Tondapu (NASA)]]
- [[mailto:stefano.ricci@fao.org][Stefano Ricci (FAO)]]
- [[mailto:roberto.fontanarosa@fao.org][Roberto Fontanarosa (FAO)]]
- [[mailto:alfonso.sanchezpausdiaz@fao.org][Alfonso SanchezPausDiaz (FAO)]]
- [[mailto:mspencer@sig-gis.com][Matt Spencer (SIG)]]
- [[mailto:bbhandari@sig-gis.com][Biplov Bhandari (SIG)]]

** License and Distribution

Copyright Â© 2016-2020 FAO.

Collect Earth Online is distributed by FAO under the terms of the MIT
License. See LICENSE in this directory for more information.
